// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Product;
import ch.emineo.roo.reverse.domain.ProductDataOnDemand;
import ch.emineo.roo.reverse.domain.ProductProductvariant;
import ch.emineo.roo.reverse.domain.ProductProductvariantDataOnDemand;
import ch.emineo.roo.reverse.domain.ProductProductvariantPK;
import ch.emineo.roo.reverse.domain.Productvariant;
import ch.emineo.roo.reverse.domain.ProductvariantDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProductProductvariantDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProductProductvariantDataOnDemand: @Component;
    
    private Random ProductProductvariantDataOnDemand.rnd = new SecureRandom();
    
    private List<ProductProductvariant> ProductProductvariantDataOnDemand.data;
    
    @Autowired
    private ProductDataOnDemand ProductProductvariantDataOnDemand.productDataOnDemand;
    
    @Autowired
    private ProductvariantDataOnDemand ProductProductvariantDataOnDemand.productvariantDataOnDemand;
    
    public ProductProductvariant ProductProductvariantDataOnDemand.getNewTransientProductProductvariant(int index) {
        ProductProductvariant obj = new ProductProductvariant();
        setEmbeddedIdClass(obj, index);
        setProductProductid(obj, index);
        setVariantsProductvariantid(obj, index);
        return obj;
    }
    
    public void ProductProductvariantDataOnDemand.setEmbeddedIdClass(ProductProductvariant obj, int index) {
        Integer productProductid = new Integer(index);
        Integer idx = new Integer(index);
        
        ProductProductvariantPK embeddedIdClass = new ProductProductvariantPK(productProductid, idx);
        obj.setId(embeddedIdClass);
    }
    
    public void ProductProductvariantDataOnDemand.setProductProductid(ProductProductvariant obj, int index) {
        Product productProductid = productDataOnDemand.getRandomProduct();
        obj.setProductProductid(productProductid);
    }
    
    public void ProductProductvariantDataOnDemand.setVariantsProductvariantid(ProductProductvariant obj, int index) {
        Productvariant variantsProductvariantid = productvariantDataOnDemand.getRandomProductvariant();
        obj.setVariantsProductvariantid(variantsProductvariantid);
    }
    
    public ProductProductvariant ProductProductvariantDataOnDemand.getSpecificProductProductvariant(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProductProductvariant obj = data.get(index);
        ProductProductvariantPK id = obj.getId();
        return ProductProductvariant.findProductProductvariant(id);
    }
    
    public ProductProductvariant ProductProductvariantDataOnDemand.getRandomProductProductvariant() {
        init();
        ProductProductvariant obj = data.get(rnd.nextInt(data.size()));
        ProductProductvariantPK id = obj.getId();
        return ProductProductvariant.findProductProductvariant(id);
    }
    
    public boolean ProductProductvariantDataOnDemand.modifyProductProductvariant(ProductProductvariant obj) {
        return false;
    }
    
    public void ProductProductvariantDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ProductProductvariant.findProductProductvariantEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProductProductvariant' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProductProductvariant>();
        for (int i = 0; i < 10; i++) {
            ProductProductvariant obj = getNewTransientProductProductvariant(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
