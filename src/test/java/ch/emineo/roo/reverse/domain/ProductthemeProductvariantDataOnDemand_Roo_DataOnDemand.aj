// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Producttheme;
import ch.emineo.roo.reverse.domain.ProductthemeDataOnDemand;
import ch.emineo.roo.reverse.domain.ProductthemeProductvariant;
import ch.emineo.roo.reverse.domain.ProductthemeProductvariantDataOnDemand;
import ch.emineo.roo.reverse.domain.ProductthemeProductvariantPK;
import ch.emineo.roo.reverse.domain.Productvariant;
import ch.emineo.roo.reverse.domain.ProductvariantDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProductthemeProductvariantDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProductthemeProductvariantDataOnDemand: @Component;
    
    private Random ProductthemeProductvariantDataOnDemand.rnd = new SecureRandom();
    
    private List<ProductthemeProductvariant> ProductthemeProductvariantDataOnDemand.data;
    
    @Autowired
    private ProductthemeDataOnDemand ProductthemeProductvariantDataOnDemand.productthemeDataOnDemand;
    
    @Autowired
    private ProductvariantDataOnDemand ProductthemeProductvariantDataOnDemand.productvariantDataOnDemand;
    
    public ProductthemeProductvariant ProductthemeProductvariantDataOnDemand.getNewTransientProductthemeProductvariant(int index) {
        ProductthemeProductvariant obj = new ProductthemeProductvariant();
        setEmbeddedIdClass(obj, index);
        setProductthemeProductthemeid(obj, index);
        setVariantsProductvariantid(obj, index);
        return obj;
    }
    
    public void ProductthemeProductvariantDataOnDemand.setEmbeddedIdClass(ProductthemeProductvariant obj, int index) {
        Integer productthemeProductthemeid = new Integer(index);
        Integer idx = new Integer(index);
        
        ProductthemeProductvariantPK embeddedIdClass = new ProductthemeProductvariantPK(productthemeProductthemeid, idx);
        obj.setId(embeddedIdClass);
    }
    
    public void ProductthemeProductvariantDataOnDemand.setProductthemeProductthemeid(ProductthemeProductvariant obj, int index) {
        Producttheme productthemeProductthemeid = productthemeDataOnDemand.getRandomProducttheme();
        obj.setProductthemeProductthemeid(productthemeProductthemeid);
    }
    
    public void ProductthemeProductvariantDataOnDemand.setVariantsProductvariantid(ProductthemeProductvariant obj, int index) {
        Productvariant variantsProductvariantid = productvariantDataOnDemand.getRandomProductvariant();
        obj.setVariantsProductvariantid(variantsProductvariantid);
    }
    
    public ProductthemeProductvariant ProductthemeProductvariantDataOnDemand.getSpecificProductthemeProductvariant(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProductthemeProductvariant obj = data.get(index);
        ProductthemeProductvariantPK id = obj.getId();
        return ProductthemeProductvariant.findProductthemeProductvariant(id);
    }
    
    public ProductthemeProductvariant ProductthemeProductvariantDataOnDemand.getRandomProductthemeProductvariant() {
        init();
        ProductthemeProductvariant obj = data.get(rnd.nextInt(data.size()));
        ProductthemeProductvariantPK id = obj.getId();
        return ProductthemeProductvariant.findProductthemeProductvariant(id);
    }
    
    public boolean ProductthemeProductvariantDataOnDemand.modifyProductthemeProductvariant(ProductthemeProductvariant obj) {
        return false;
    }
    
    public void ProductthemeProductvariantDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ProductthemeProductvariant.findProductthemeProductvariantEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProductthemeProductvariant' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProductthemeProductvariant>();
        for (int i = 0; i < 10; i++) {
            ProductthemeProductvariant obj = getNewTransientProductthemeProductvariant(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
