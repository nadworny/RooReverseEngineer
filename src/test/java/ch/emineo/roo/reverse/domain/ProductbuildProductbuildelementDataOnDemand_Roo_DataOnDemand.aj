// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Productbuild;
import ch.emineo.roo.reverse.domain.ProductbuildDataOnDemand;
import ch.emineo.roo.reverse.domain.ProductbuildProductbuildelement;
import ch.emineo.roo.reverse.domain.ProductbuildProductbuildelementDataOnDemand;
import ch.emineo.roo.reverse.domain.ProductbuildProductbuildelementPK;
import ch.emineo.roo.reverse.domain.Productbuildelement;
import ch.emineo.roo.reverse.domain.ProductbuildelementDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProductbuildProductbuildelementDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProductbuildProductbuildelementDataOnDemand: @Component;
    
    private Random ProductbuildProductbuildelementDataOnDemand.rnd = new SecureRandom();
    
    private List<ProductbuildProductbuildelement> ProductbuildProductbuildelementDataOnDemand.data;
    
    @Autowired
    private ProductbuildDataOnDemand ProductbuildProductbuildelementDataOnDemand.productbuildDataOnDemand;
    
    @Autowired
    private ProductbuildelementDataOnDemand ProductbuildProductbuildelementDataOnDemand.productbuildelementDataOnDemand;
    
    public ProductbuildProductbuildelement ProductbuildProductbuildelementDataOnDemand.getNewTransientProductbuildProductbuildelement(int index) {
        ProductbuildProductbuildelement obj = new ProductbuildProductbuildelement();
        setEmbeddedIdClass(obj, index);
        setProductbuildProductbuildid(obj, index);
        setProductbuildelementsProductbuildelementid(obj, index);
        return obj;
    }
    
    public void ProductbuildProductbuildelementDataOnDemand.setEmbeddedIdClass(ProductbuildProductbuildelement obj, int index) {
        Integer productbuildProductbuildid = new Integer(index);
        Integer idx = new Integer(index);
        
        ProductbuildProductbuildelementPK embeddedIdClass = new ProductbuildProductbuildelementPK(productbuildProductbuildid, idx);
        obj.setId(embeddedIdClass);
    }
    
    public void ProductbuildProductbuildelementDataOnDemand.setProductbuildProductbuildid(ProductbuildProductbuildelement obj, int index) {
        Productbuild productbuildProductbuildid = productbuildDataOnDemand.getRandomProductbuild();
        obj.setProductbuildProductbuildid(productbuildProductbuildid);
    }
    
    public void ProductbuildProductbuildelementDataOnDemand.setProductbuildelementsProductbuildelementid(ProductbuildProductbuildelement obj, int index) {
        Productbuildelement productbuildelementsProductbuildelementid = productbuildelementDataOnDemand.getRandomProductbuildelement();
        obj.setProductbuildelementsProductbuildelementid(productbuildelementsProductbuildelementid);
    }
    
    public ProductbuildProductbuildelement ProductbuildProductbuildelementDataOnDemand.getSpecificProductbuildProductbuildelement(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProductbuildProductbuildelement obj = data.get(index);
        ProductbuildProductbuildelementPK id = obj.getId();
        return ProductbuildProductbuildelement.findProductbuildProductbuildelement(id);
    }
    
    public ProductbuildProductbuildelement ProductbuildProductbuildelementDataOnDemand.getRandomProductbuildProductbuildelement() {
        init();
        ProductbuildProductbuildelement obj = data.get(rnd.nextInt(data.size()));
        ProductbuildProductbuildelementPK id = obj.getId();
        return ProductbuildProductbuildelement.findProductbuildProductbuildelement(id);
    }
    
    public boolean ProductbuildProductbuildelementDataOnDemand.modifyProductbuildProductbuildelement(ProductbuildProductbuildelement obj) {
        return false;
    }
    
    public void ProductbuildProductbuildelementDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ProductbuildProductbuildelement.findProductbuildProductbuildelementEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProductbuildProductbuildelement' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProductbuildProductbuildelement>();
        for (int i = 0; i < 10; i++) {
            ProductbuildProductbuildelement obj = getNewTransientProductbuildProductbuildelement(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
