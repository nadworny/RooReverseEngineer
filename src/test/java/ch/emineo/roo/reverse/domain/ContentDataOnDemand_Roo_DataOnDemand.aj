// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Attribute;
import ch.emineo.roo.reverse.domain.AttributeDataOnDemand;
import ch.emineo.roo.reverse.domain.Content;
import ch.emineo.roo.reverse.domain.ContentDataOnDemand;
import ch.emineo.roo.reverse.domain.Deliveryinfo;
import ch.emineo.roo.reverse.domain.DeliveryinfoDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ContentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ContentDataOnDemand: @Component;
    
    private Random ContentDataOnDemand.rnd = new SecureRandom();
    
    private List<Content> ContentDataOnDemand.data;
    
    @Autowired
    private DeliveryinfoDataOnDemand ContentDataOnDemand.deliveryinfoDataOnDemand;
    
    @Autowired
    private AttributeDataOnDemand ContentDataOnDemand.attributeDataOnDemand;
    
    public Content ContentDataOnDemand.getNewTransientContent(int index) {
        Content obj = new Content();
        setContentdeliverytype(obj, index);
        setDeliveryinfoFk(obj, index);
        setDeliverytime(obj, index);
        setDescriptionAttributeid(obj, index);
        setLanguage(obj, index);
        setOnline(obj, index);
        setPublic1(obj, index);
        setSample(obj, index);
        return obj;
    }
    
    public void ContentDataOnDemand.setContentdeliverytype(Content obj, int index) {
        String contentdeliverytype = "contentdeliverytype_" + index;
        if (contentdeliverytype.length() > 255) {
            contentdeliverytype = contentdeliverytype.substring(0, 255);
        }
        obj.setContentdeliverytype(contentdeliverytype);
    }
    
    public void ContentDataOnDemand.setDeliveryinfoFk(Content obj, int index) {
        Deliveryinfo deliveryinfoFk = deliveryinfoDataOnDemand.getRandomDeliveryinfo();
        obj.setDeliveryinfoFk(deliveryinfoFk);
    }
    
    public void ContentDataOnDemand.setDeliverytime(Content obj, int index) {
        Date deliverytime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDeliverytime(deliverytime);
    }
    
    public void ContentDataOnDemand.setDescriptionAttributeid(Content obj, int index) {
        Attribute descriptionAttributeid = attributeDataOnDemand.getRandomAttribute();
        obj.setDescriptionAttributeid(descriptionAttributeid);
    }
    
    public void ContentDataOnDemand.setLanguage(Content obj, int index) {
        String language = "language_" + index;
        if (language.length() > 255) {
            language = language.substring(0, 255);
        }
        obj.setLanguage(language);
    }
    
    public void ContentDataOnDemand.setOnline(Content obj, int index) {
        Boolean online = true;
        obj.setOnline(online);
    }
    
    public void ContentDataOnDemand.setPublic1(Content obj, int index) {
        Boolean public1 = true;
        obj.setPublic1(public1);
    }
    
    public void ContentDataOnDemand.setSample(Content obj, int index) {
        Boolean sample = true;
        obj.setSample(sample);
    }
    
    public Content ContentDataOnDemand.getSpecificContent(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Content obj = data.get(index);
        String id = obj.getContentid();
        return Content.findContent(id);
    }
    
    public Content ContentDataOnDemand.getRandomContent() {
        init();
        Content obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getContentid();
        return Content.findContent(id);
    }
    
    public boolean ContentDataOnDemand.modifyContent(Content obj) {
        return false;
    }
    
    public void ContentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Content.findContentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Content' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Content>();
        for (int i = 0; i < 10; i++) {
            Content obj = getNewTransientContent(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
