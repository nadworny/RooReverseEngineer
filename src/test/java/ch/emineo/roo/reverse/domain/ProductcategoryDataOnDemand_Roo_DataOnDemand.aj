// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Productcategory;
import ch.emineo.roo.reverse.domain.ProductcategoryDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect ProductcategoryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProductcategoryDataOnDemand: @Component;
    
    private Random ProductcategoryDataOnDemand.rnd = new SecureRandom();
    
    private List<Productcategory> ProductcategoryDataOnDemand.data;
    
    public Productcategory ProductcategoryDataOnDemand.getNewTransientProductcategory(int index) {
        Productcategory obj = new Productcategory();
        setOnline(obj, index);
        setPicturepath(obj, index);
        setPublic1(obj, index);
        return obj;
    }
    
    public void ProductcategoryDataOnDemand.setOnline(Productcategory obj, int index) {
        Boolean online = true;
        obj.setOnline(online);
    }
    
    public void ProductcategoryDataOnDemand.setPicturepath(Productcategory obj, int index) {
        String picturepath = "picturepath_" + index;
        if (picturepath.length() > 255) {
            picturepath = picturepath.substring(0, 255);
        }
        obj.setPicturepath(picturepath);
    }
    
    public void ProductcategoryDataOnDemand.setPublic1(Productcategory obj, int index) {
        Boolean public1 = true;
        obj.setPublic1(public1);
    }
    
    public Productcategory ProductcategoryDataOnDemand.getSpecificProductcategory(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Productcategory obj = data.get(index);
        Integer id = obj.getProductcategoryid();
        return Productcategory.findProductcategory(id);
    }
    
    public Productcategory ProductcategoryDataOnDemand.getRandomProductcategory() {
        init();
        Productcategory obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getProductcategoryid();
        return Productcategory.findProductcategory(id);
    }
    
    public boolean ProductcategoryDataOnDemand.modifyProductcategory(Productcategory obj) {
        return false;
    }
    
    public void ProductcategoryDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Productcategory.findProductcategoryEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Productcategory' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Productcategory>();
        for (int i = 0; i < 10; i++) {
            Productcategory obj = getNewTransientProductcategory(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
