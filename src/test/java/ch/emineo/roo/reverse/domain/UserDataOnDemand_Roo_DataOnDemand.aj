// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.User;
import ch.emineo.roo.reverse.domain.UserDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect UserDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserDataOnDemand: @Component;
    
    private Random UserDataOnDemand.rnd = new SecureRandom();
    
    private List<User> UserDataOnDemand.data;
    
    public User UserDataOnDemand.getNewTransientUser(int index) {
        User obj = new User();
        setCanpaybybill(obj, index);
        setCity(obj, index);
        setCompany(obj, index);
        setCreated(obj, index);
        setEmail(obj, index);
        setFirstname(obj, index);
        setFon(obj, index);
        setLastname(obj, index);
        setLicencenumber(obj, index);
        setMissedlogins(obj, index);
        setMobile(obj, index);
        setOnline(obj, index);
        setPassword(obj, index);
        setPlz(obj, index);
        setPublic1(obj, index);
        setSalutation(obj, index);
        setStreet(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void UserDataOnDemand.setCanpaybybill(User obj, int index) {
        Boolean canpaybybill = true;
        obj.setCanpaybybill(canpaybybill);
    }
    
    public void UserDataOnDemand.setCity(User obj, int index) {
        String city = "city_" + index;
        if (city.length() > 255) {
            city = city.substring(0, 255);
        }
        obj.setCity(city);
    }
    
    public void UserDataOnDemand.setCompany(User obj, int index) {
        String company = "company_" + index;
        if (company.length() > 255) {
            company = company.substring(0, 255);
        }
        obj.setCompany(company);
    }
    
    public void UserDataOnDemand.setCreated(User obj, int index) {
        Date created = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreated(created);
    }
    
    public void UserDataOnDemand.setEmail(User obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 255) {
            email = email.substring(0, 255);
        }
        obj.setEmail(email);
    }
    
    public void UserDataOnDemand.setFirstname(User obj, int index) {
        String firstname = "firstname_" + index;
        if (firstname.length() > 255) {
            firstname = firstname.substring(0, 255);
        }
        obj.setFirstname(firstname);
    }
    
    public void UserDataOnDemand.setFon(User obj, int index) {
        String fon = "fon_" + index;
        if (fon.length() > 255) {
            fon = fon.substring(0, 255);
        }
        obj.setFon(fon);
    }
    
    public void UserDataOnDemand.setLastname(User obj, int index) {
        String lastname = "lastname_" + index;
        if (lastname.length() > 255) {
            lastname = lastname.substring(0, 255);
        }
        obj.setLastname(lastname);
    }
    
    public void UserDataOnDemand.setLicencenumber(User obj, int index) {
        String licencenumber = "licencenumber_" + index;
        if (licencenumber.length() > 255) {
            licencenumber = licencenumber.substring(0, 255);
        }
        obj.setLicencenumber(licencenumber);
    }
    
    public void UserDataOnDemand.setMissedlogins(User obj, int index) {
        Integer missedlogins = new Integer(index);
        obj.setMissedlogins(missedlogins);
    }
    
    public void UserDataOnDemand.setMobile(User obj, int index) {
        String mobile = "mobile_" + index;
        if (mobile.length() > 255) {
            mobile = mobile.substring(0, 255);
        }
        obj.setMobile(mobile);
    }
    
    public void UserDataOnDemand.setOnline(User obj, int index) {
        Boolean online = true;
        obj.setOnline(online);
    }
    
    public void UserDataOnDemand.setPassword(User obj, int index) {
        byte[] password = String.valueOf(index).getBytes();
        obj.setPassword(password);
    }
    
    public void UserDataOnDemand.setPlz(User obj, int index) {
        String plz = "plz_" + index;
        if (plz.length() > 255) {
            plz = plz.substring(0, 255);
        }
        obj.setPlz(plz);
    }
    
    public void UserDataOnDemand.setPublic1(User obj, int index) {
        Boolean public1 = true;
        obj.setPublic1(public1);
    }
    
    public void UserDataOnDemand.setSalutation(User obj, int index) {
        String salutation = "salutation_" + index;
        if (salutation.length() > 255) {
            salutation = salutation.substring(0, 255);
        }
        obj.setSalutation(salutation);
    }
    
    public void UserDataOnDemand.setStreet(User obj, int index) {
        String street = "street_" + index;
        if (street.length() > 255) {
            street = street.substring(0, 255);
        }
        obj.setStreet(street);
    }
    
    public void UserDataOnDemand.setUsername(User obj, int index) {
        String username = "username_" + index;
        if (username.length() > 255) {
            username = new Random().nextInt(10) + username.substring(1, 255);
        }
        obj.setUsername(username);
    }
    
    public User UserDataOnDemand.getSpecificUser(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        User obj = data.get(index);
        Integer id = obj.getUserid();
        return User.findUser(id);
    }
    
    public User UserDataOnDemand.getRandomUser() {
        init();
        User obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getUserid();
        return User.findUser(id);
    }
    
    public boolean UserDataOnDemand.modifyUser(User obj) {
        return false;
    }
    
    public void UserDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = User.findUserEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'User' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<User>();
        for (int i = 0; i < 10; i++) {
            User obj = getNewTransientUser(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
