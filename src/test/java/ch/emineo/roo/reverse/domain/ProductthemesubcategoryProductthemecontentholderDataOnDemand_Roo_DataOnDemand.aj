// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Productthemecontentholder;
import ch.emineo.roo.reverse.domain.ProductthemecontentholderDataOnDemand;
import ch.emineo.roo.reverse.domain.Productthemesubcategory;
import ch.emineo.roo.reverse.domain.ProductthemesubcategoryDataOnDemand;
import ch.emineo.roo.reverse.domain.ProductthemesubcategoryProductthemecontentholder;
import ch.emineo.roo.reverse.domain.ProductthemesubcategoryProductthemecontentholderDataOnDemand;
import ch.emineo.roo.reverse.domain.ProductthemesubcategoryProductthemecontentholderPK;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProductthemesubcategoryProductthemecontentholderDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProductthemesubcategoryProductthemecontentholderDataOnDemand: @Component;
    
    private Random ProductthemesubcategoryProductthemecontentholderDataOnDemand.rnd = new SecureRandom();
    
    private List<ProductthemesubcategoryProductthemecontentholder> ProductthemesubcategoryProductthemecontentholderDataOnDemand.data;
    
    @Autowired
    private ProductthemecontentholderDataOnDemand ProductthemesubcategoryProductthemecontentholderDataOnDemand.productthemecontentholderDataOnDemand;
    
    @Autowired
    private ProductthemesubcategoryDataOnDemand ProductthemesubcategoryProductthemecontentholderDataOnDemand.productthemesubcategoryDataOnDemand;
    
    public ProductthemesubcategoryProductthemecontentholder ProductthemesubcategoryProductthemecontentholderDataOnDemand.getNewTransientProductthemesubcategoryProductthemecontentholder(int index) {
        ProductthemesubcategoryProductthemecontentholder obj = new ProductthemesubcategoryProductthemecontentholder();
        setEmbeddedIdClass(obj, index);
        setProductthemecontentholdersProductthemecontentholderid(obj, index);
        setProductthemesubcategoryProductthemesubcategoryid(obj, index);
        return obj;
    }
    
    public void ProductthemesubcategoryProductthemecontentholderDataOnDemand.setEmbeddedIdClass(ProductthemesubcategoryProductthemecontentholder obj, int index) {
        Integer productthemesubcategoryProductthemesubcategoryid = new Integer(index);
        Integer idx = new Integer(index);
        
        ProductthemesubcategoryProductthemecontentholderPK embeddedIdClass = new ProductthemesubcategoryProductthemecontentholderPK(productthemesubcategoryProductthemesubcategoryid, idx);
        obj.setId(embeddedIdClass);
    }
    
    public void ProductthemesubcategoryProductthemecontentholderDataOnDemand.setProductthemecontentholdersProductthemecontentholderid(ProductthemesubcategoryProductthemecontentholder obj, int index) {
        Productthemecontentholder productthemecontentholdersProductthemecontentholderid = productthemecontentholderDataOnDemand.getRandomProductthemecontentholder();
        obj.setProductthemecontentholdersProductthemecontentholderid(productthemecontentholdersProductthemecontentholderid);
    }
    
    public void ProductthemesubcategoryProductthemecontentholderDataOnDemand.setProductthemesubcategoryProductthemesubcategoryid(ProductthemesubcategoryProductthemecontentholder obj, int index) {
        Productthemesubcategory productthemesubcategoryProductthemesubcategoryid = productthemesubcategoryDataOnDemand.getRandomProductthemesubcategory();
        obj.setProductthemesubcategoryProductthemesubcategoryid(productthemesubcategoryProductthemesubcategoryid);
    }
    
    public ProductthemesubcategoryProductthemecontentholder ProductthemesubcategoryProductthemecontentholderDataOnDemand.getSpecificProductthemesubcategoryProductthemecontentholder(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProductthemesubcategoryProductthemecontentholder obj = data.get(index);
        ProductthemesubcategoryProductthemecontentholderPK id = obj.getId();
        return ProductthemesubcategoryProductthemecontentholder.findProductthemesubcategoryProductthemecontentholder(id);
    }
    
    public ProductthemesubcategoryProductthemecontentholder ProductthemesubcategoryProductthemecontentholderDataOnDemand.getRandomProductthemesubcategoryProductthemecontentholder() {
        init();
        ProductthemesubcategoryProductthemecontentholder obj = data.get(rnd.nextInt(data.size()));
        ProductthemesubcategoryProductthemecontentholderPK id = obj.getId();
        return ProductthemesubcategoryProductthemecontentholder.findProductthemesubcategoryProductthemecontentholder(id);
    }
    
    public boolean ProductthemesubcategoryProductthemecontentholderDataOnDemand.modifyProductthemesubcategoryProductthemecontentholder(ProductthemesubcategoryProductthemecontentholder obj) {
        return false;
    }
    
    public void ProductthemesubcategoryProductthemecontentholderDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ProductthemesubcategoryProductthemecontentholder.findProductthemesubcategoryProductthemecontentholderEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProductthemesubcategoryProductthemecontentholder' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProductthemesubcategoryProductthemecontentholder>();
        for (int i = 0; i < 10; i++) {
            ProductthemesubcategoryProductthemecontentholder obj = getNewTransientProductthemesubcategoryProductthemecontentholder(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
