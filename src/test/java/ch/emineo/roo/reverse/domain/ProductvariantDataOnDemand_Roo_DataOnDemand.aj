// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Productvariant;
import ch.emineo.roo.reverse.domain.ProductvariantDataOnDemand;
import ch.emineo.roo.reverse.domain.Subscriptiontype;
import ch.emineo.roo.reverse.domain.SubscriptiontypeDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProductvariantDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProductvariantDataOnDemand: @Component;
    
    private Random ProductvariantDataOnDemand.rnd = new SecureRandom();
    
    private List<Productvariant> ProductvariantDataOnDemand.data;
    
    @Autowired
    private SubscriptiontypeDataOnDemand ProductvariantDataOnDemand.subscriptiontypeDataOnDemand;
    
    public Productvariant ProductvariantDataOnDemand.getNewTransientProductvariant(int index) {
        Productvariant obj = new Productvariant();
        setFree(obj, index);
        setOnline(obj, index);
        setPrice(obj, index);
        setPublish(obj, index);
        setSubscriptiontypeMonths(obj, index);
        return obj;
    }
    
    public void ProductvariantDataOnDemand.setFree(Productvariant obj, int index) {
        Boolean free = true;
        obj.setFree(free);
    }
    
    public void ProductvariantDataOnDemand.setOnline(Productvariant obj, int index) {
        Boolean online = true;
        obj.setOnline(online);
    }
    
    public void ProductvariantDataOnDemand.setPrice(Productvariant obj, int index) {
        Double price = new Integer(index).doubleValue();
        obj.setPrice(price);
    }
    
    public void ProductvariantDataOnDemand.setPublish(Productvariant obj, int index) {
        Boolean publish = true;
        obj.setPublish(publish);
    }
    
    public void ProductvariantDataOnDemand.setSubscriptiontypeMonths(Productvariant obj, int index) {
        Subscriptiontype subscriptiontypeMonths = subscriptiontypeDataOnDemand.getRandomSubscriptiontype();
        obj.setSubscriptiontypeMonths(subscriptiontypeMonths);
    }
    
    public Productvariant ProductvariantDataOnDemand.getSpecificProductvariant(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Productvariant obj = data.get(index);
        Integer id = obj.getProductvariantid();
        return Productvariant.findProductvariant(id);
    }
    
    public Productvariant ProductvariantDataOnDemand.getRandomProductvariant() {
        init();
        Productvariant obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getProductvariantid();
        return Productvariant.findProductvariant(id);
    }
    
    public boolean ProductvariantDataOnDemand.modifyProductvariant(Productvariant obj) {
        return false;
    }
    
    public void ProductvariantDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Productvariant.findProductvariantEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Productvariant' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Productvariant>();
        for (int i = 0; i < 10; i++) {
            Productvariant obj = getNewTransientProductvariant(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
