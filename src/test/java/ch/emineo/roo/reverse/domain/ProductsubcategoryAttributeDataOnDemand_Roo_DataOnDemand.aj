// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Attribute;
import ch.emineo.roo.reverse.domain.AttributeDataOnDemand;
import ch.emineo.roo.reverse.domain.Productsubcategory;
import ch.emineo.roo.reverse.domain.ProductsubcategoryAttribute;
import ch.emineo.roo.reverse.domain.ProductsubcategoryAttributeDataOnDemand;
import ch.emineo.roo.reverse.domain.ProductsubcategoryAttributePK;
import ch.emineo.roo.reverse.domain.ProductsubcategoryDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProductsubcategoryAttributeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProductsubcategoryAttributeDataOnDemand: @Component;
    
    private Random ProductsubcategoryAttributeDataOnDemand.rnd = new SecureRandom();
    
    private List<ProductsubcategoryAttribute> ProductsubcategoryAttributeDataOnDemand.data;
    
    @Autowired
    private AttributeDataOnDemand ProductsubcategoryAttributeDataOnDemand.attributeDataOnDemand;
    
    @Autowired
    private ProductsubcategoryDataOnDemand ProductsubcategoryAttributeDataOnDemand.productsubcategoryDataOnDemand;
    
    public ProductsubcategoryAttribute ProductsubcategoryAttributeDataOnDemand.getNewTransientProductsubcategoryAttribute(int index) {
        ProductsubcategoryAttribute obj = new ProductsubcategoryAttribute();
        setEmbeddedIdClass(obj, index);
        setAttributesAttributeid(obj, index);
        setProductsubcategoryProductsubcategoryid(obj, index);
        return obj;
    }
    
    public void ProductsubcategoryAttributeDataOnDemand.setEmbeddedIdClass(ProductsubcategoryAttribute obj, int index) {
        Integer productsubcategoryProductsubcategoryid = new Integer(index);
        Integer idx = new Integer(index);
        
        ProductsubcategoryAttributePK embeddedIdClass = new ProductsubcategoryAttributePK(productsubcategoryProductsubcategoryid, idx);
        obj.setId(embeddedIdClass);
    }
    
    public void ProductsubcategoryAttributeDataOnDemand.setAttributesAttributeid(ProductsubcategoryAttribute obj, int index) {
        Attribute attributesAttributeid = attributeDataOnDemand.getRandomAttribute();
        obj.setAttributesAttributeid(attributesAttributeid);
    }
    
    public void ProductsubcategoryAttributeDataOnDemand.setProductsubcategoryProductsubcategoryid(ProductsubcategoryAttribute obj, int index) {
        Productsubcategory productsubcategoryProductsubcategoryid = productsubcategoryDataOnDemand.getRandomProductsubcategory();
        obj.setProductsubcategoryProductsubcategoryid(productsubcategoryProductsubcategoryid);
    }
    
    public ProductsubcategoryAttribute ProductsubcategoryAttributeDataOnDemand.getSpecificProductsubcategoryAttribute(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProductsubcategoryAttribute obj = data.get(index);
        ProductsubcategoryAttributePK id = obj.getId();
        return ProductsubcategoryAttribute.findProductsubcategoryAttribute(id);
    }
    
    public ProductsubcategoryAttribute ProductsubcategoryAttributeDataOnDemand.getRandomProductsubcategoryAttribute() {
        init();
        ProductsubcategoryAttribute obj = data.get(rnd.nextInt(data.size()));
        ProductsubcategoryAttributePK id = obj.getId();
        return ProductsubcategoryAttribute.findProductsubcategoryAttribute(id);
    }
    
    public boolean ProductsubcategoryAttributeDataOnDemand.modifyProductsubcategoryAttribute(ProductsubcategoryAttribute obj) {
        return false;
    }
    
    public void ProductsubcategoryAttributeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ProductsubcategoryAttribute.findProductsubcategoryAttributeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProductsubcategoryAttribute' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProductsubcategoryAttribute>();
        for (int i = 0; i < 10; i++) {
            ProductsubcategoryAttribute obj = getNewTransientProductsubcategoryAttribute(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
