// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Productthemecategory;
import ch.emineo.roo.reverse.domain.ProductthemecategoryDataOnDemand;
import ch.emineo.roo.reverse.domain.ProductthemecategoryProductthemesubcategory;
import ch.emineo.roo.reverse.domain.ProductthemecategoryProductthemesubcategoryDataOnDemand;
import ch.emineo.roo.reverse.domain.ProductthemecategoryProductthemesubcategoryPK;
import ch.emineo.roo.reverse.domain.Productthemesubcategory;
import ch.emineo.roo.reverse.domain.ProductthemesubcategoryDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProductthemecategoryProductthemesubcategoryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProductthemecategoryProductthemesubcategoryDataOnDemand: @Component;
    
    private Random ProductthemecategoryProductthemesubcategoryDataOnDemand.rnd = new SecureRandom();
    
    private List<ProductthemecategoryProductthemesubcategory> ProductthemecategoryProductthemesubcategoryDataOnDemand.data;
    
    @Autowired
    private ProductthemecategoryDataOnDemand ProductthemecategoryProductthemesubcategoryDataOnDemand.productthemecategoryDataOnDemand;
    
    @Autowired
    private ProductthemesubcategoryDataOnDemand ProductthemecategoryProductthemesubcategoryDataOnDemand.productthemesubcategoryDataOnDemand;
    
    public ProductthemecategoryProductthemesubcategory ProductthemecategoryProductthemesubcategoryDataOnDemand.getNewTransientProductthemecategoryProductthemesubcategory(int index) {
        ProductthemecategoryProductthemesubcategory obj = new ProductthemecategoryProductthemesubcategory();
        setEmbeddedIdClass(obj, index);
        setProductthemecategoryProductthemecategoryid(obj, index);
        setProductthemesubcategoriesProductthemesubcategoryid(obj, index);
        return obj;
    }
    
    public void ProductthemecategoryProductthemesubcategoryDataOnDemand.setEmbeddedIdClass(ProductthemecategoryProductthemesubcategory obj, int index) {
        Integer productthemecategoryProductthemecategoryid = new Integer(index);
        Integer idx = new Integer(index);
        
        ProductthemecategoryProductthemesubcategoryPK embeddedIdClass = new ProductthemecategoryProductthemesubcategoryPK(productthemecategoryProductthemecategoryid, idx);
        obj.setId(embeddedIdClass);
    }
    
    public void ProductthemecategoryProductthemesubcategoryDataOnDemand.setProductthemecategoryProductthemecategoryid(ProductthemecategoryProductthemesubcategory obj, int index) {
        Productthemecategory productthemecategoryProductthemecategoryid = productthemecategoryDataOnDemand.getRandomProductthemecategory();
        obj.setProductthemecategoryProductthemecategoryid(productthemecategoryProductthemecategoryid);
    }
    
    public void ProductthemecategoryProductthemesubcategoryDataOnDemand.setProductthemesubcategoriesProductthemesubcategoryid(ProductthemecategoryProductthemesubcategory obj, int index) {
        Productthemesubcategory productthemesubcategoriesProductthemesubcategoryid = productthemesubcategoryDataOnDemand.getRandomProductthemesubcategory();
        obj.setProductthemesubcategoriesProductthemesubcategoryid(productthemesubcategoriesProductthemesubcategoryid);
    }
    
    public ProductthemecategoryProductthemesubcategory ProductthemecategoryProductthemesubcategoryDataOnDemand.getSpecificProductthemecategoryProductthemesubcategory(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProductthemecategoryProductthemesubcategory obj = data.get(index);
        ProductthemecategoryProductthemesubcategoryPK id = obj.getId();
        return ProductthemecategoryProductthemesubcategory.findProductthemecategoryProductthemesubcategory(id);
    }
    
    public ProductthemecategoryProductthemesubcategory ProductthemecategoryProductthemesubcategoryDataOnDemand.getRandomProductthemecategoryProductthemesubcategory() {
        init();
        ProductthemecategoryProductthemesubcategory obj = data.get(rnd.nextInt(data.size()));
        ProductthemecategoryProductthemesubcategoryPK id = obj.getId();
        return ProductthemecategoryProductthemesubcategory.findProductthemecategoryProductthemesubcategory(id);
    }
    
    public boolean ProductthemecategoryProductthemesubcategoryDataOnDemand.modifyProductthemecategoryProductthemesubcategory(ProductthemecategoryProductthemesubcategory obj) {
        return false;
    }
    
    public void ProductthemecategoryProductthemesubcategoryDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ProductthemecategoryProductthemesubcategory.findProductthemecategoryProductthemesubcategoryEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProductthemecategoryProductthemesubcategory' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProductthemecategoryProductthemesubcategory>();
        for (int i = 0; i < 10; i++) {
            ProductthemecategoryProductthemesubcategory obj = getNewTransientProductthemecategoryProductthemesubcategory(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
