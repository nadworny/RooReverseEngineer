// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Attribute;
import ch.emineo.roo.reverse.domain.AttributeDataOnDemand;
import ch.emineo.roo.reverse.domain.Producttheme;
import ch.emineo.roo.reverse.domain.ProductthemeAttribute;
import ch.emineo.roo.reverse.domain.ProductthemeAttributeDataOnDemand;
import ch.emineo.roo.reverse.domain.ProductthemeAttributePK;
import ch.emineo.roo.reverse.domain.ProductthemeDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProductthemeAttributeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProductthemeAttributeDataOnDemand: @Component;
    
    private Random ProductthemeAttributeDataOnDemand.rnd = new SecureRandom();
    
    private List<ProductthemeAttribute> ProductthemeAttributeDataOnDemand.data;
    
    @Autowired
    private AttributeDataOnDemand ProductthemeAttributeDataOnDemand.attributeDataOnDemand;
    
    @Autowired
    private ProductthemeDataOnDemand ProductthemeAttributeDataOnDemand.productthemeDataOnDemand;
    
    public ProductthemeAttribute ProductthemeAttributeDataOnDemand.getNewTransientProductthemeAttribute(int index) {
        ProductthemeAttribute obj = new ProductthemeAttribute();
        setEmbeddedIdClass(obj, index);
        setAttributesAttributeid(obj, index);
        setProductthemeProductthemeid(obj, index);
        return obj;
    }
    
    public void ProductthemeAttributeDataOnDemand.setEmbeddedIdClass(ProductthemeAttribute obj, int index) {
        Integer productthemeProductthemeid = new Integer(index);
        Integer idx = new Integer(index);
        
        ProductthemeAttributePK embeddedIdClass = new ProductthemeAttributePK(productthemeProductthemeid, idx);
        obj.setId(embeddedIdClass);
    }
    
    public void ProductthemeAttributeDataOnDemand.setAttributesAttributeid(ProductthemeAttribute obj, int index) {
        Attribute attributesAttributeid = attributeDataOnDemand.getRandomAttribute();
        obj.setAttributesAttributeid(attributesAttributeid);
    }
    
    public void ProductthemeAttributeDataOnDemand.setProductthemeProductthemeid(ProductthemeAttribute obj, int index) {
        Producttheme productthemeProductthemeid = productthemeDataOnDemand.getRandomProducttheme();
        obj.setProductthemeProductthemeid(productthemeProductthemeid);
    }
    
    public ProductthemeAttribute ProductthemeAttributeDataOnDemand.getSpecificProductthemeAttribute(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProductthemeAttribute obj = data.get(index);
        ProductthemeAttributePK id = obj.getId();
        return ProductthemeAttribute.findProductthemeAttribute(id);
    }
    
    public ProductthemeAttribute ProductthemeAttributeDataOnDemand.getRandomProductthemeAttribute() {
        init();
        ProductthemeAttribute obj = data.get(rnd.nextInt(data.size()));
        ProductthemeAttributePK id = obj.getId();
        return ProductthemeAttribute.findProductthemeAttribute(id);
    }
    
    public boolean ProductthemeAttributeDataOnDemand.modifyProductthemeAttribute(ProductthemeAttribute obj) {
        return false;
    }
    
    public void ProductthemeAttributeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ProductthemeAttribute.findProductthemeAttributeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProductthemeAttribute' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProductthemeAttribute>();
        for (int i = 0; i < 10; i++) {
            ProductthemeAttribute obj = getNewTransientProductthemeAttribute(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
