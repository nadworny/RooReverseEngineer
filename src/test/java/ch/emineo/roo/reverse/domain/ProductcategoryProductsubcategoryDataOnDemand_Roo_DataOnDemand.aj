// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Productcategory;
import ch.emineo.roo.reverse.domain.ProductcategoryDataOnDemand;
import ch.emineo.roo.reverse.domain.ProductcategoryProductsubcategory;
import ch.emineo.roo.reverse.domain.ProductcategoryProductsubcategoryDataOnDemand;
import ch.emineo.roo.reverse.domain.ProductcategoryProductsubcategoryPK;
import ch.emineo.roo.reverse.domain.Productsubcategory;
import ch.emineo.roo.reverse.domain.ProductsubcategoryDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProductcategoryProductsubcategoryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProductcategoryProductsubcategoryDataOnDemand: @Component;
    
    private Random ProductcategoryProductsubcategoryDataOnDemand.rnd = new SecureRandom();
    
    private List<ProductcategoryProductsubcategory> ProductcategoryProductsubcategoryDataOnDemand.data;
    
    @Autowired
    private ProductcategoryDataOnDemand ProductcategoryProductsubcategoryDataOnDemand.productcategoryDataOnDemand;
    
    @Autowired
    private ProductsubcategoryDataOnDemand ProductcategoryProductsubcategoryDataOnDemand.productsubcategoryDataOnDemand;
    
    public ProductcategoryProductsubcategory ProductcategoryProductsubcategoryDataOnDemand.getNewTransientProductcategoryProductsubcategory(int index) {
        ProductcategoryProductsubcategory obj = new ProductcategoryProductsubcategory();
        setEmbeddedIdClass(obj, index);
        setProductcategoryProductcategoryid(obj, index);
        setSubcategoriesProductsubcategoryid(obj, index);
        return obj;
    }
    
    public void ProductcategoryProductsubcategoryDataOnDemand.setEmbeddedIdClass(ProductcategoryProductsubcategory obj, int index) {
        Integer productcategoryProductcategoryid = new Integer(index);
        Integer idx = new Integer(index);
        
        ProductcategoryProductsubcategoryPK embeddedIdClass = new ProductcategoryProductsubcategoryPK(productcategoryProductcategoryid, idx);
        obj.setId(embeddedIdClass);
    }
    
    public void ProductcategoryProductsubcategoryDataOnDemand.setProductcategoryProductcategoryid(ProductcategoryProductsubcategory obj, int index) {
        Productcategory productcategoryProductcategoryid = productcategoryDataOnDemand.getRandomProductcategory();
        obj.setProductcategoryProductcategoryid(productcategoryProductcategoryid);
    }
    
    public void ProductcategoryProductsubcategoryDataOnDemand.setSubcategoriesProductsubcategoryid(ProductcategoryProductsubcategory obj, int index) {
        Productsubcategory subcategoriesProductsubcategoryid = productsubcategoryDataOnDemand.getRandomProductsubcategory();
        obj.setSubcategoriesProductsubcategoryid(subcategoriesProductsubcategoryid);
    }
    
    public ProductcategoryProductsubcategory ProductcategoryProductsubcategoryDataOnDemand.getSpecificProductcategoryProductsubcategory(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProductcategoryProductsubcategory obj = data.get(index);
        ProductcategoryProductsubcategoryPK id = obj.getId();
        return ProductcategoryProductsubcategory.findProductcategoryProductsubcategory(id);
    }
    
    public ProductcategoryProductsubcategory ProductcategoryProductsubcategoryDataOnDemand.getRandomProductcategoryProductsubcategory() {
        init();
        ProductcategoryProductsubcategory obj = data.get(rnd.nextInt(data.size()));
        ProductcategoryProductsubcategoryPK id = obj.getId();
        return ProductcategoryProductsubcategory.findProductcategoryProductsubcategory(id);
    }
    
    public boolean ProductcategoryProductsubcategoryDataOnDemand.modifyProductcategoryProductsubcategory(ProductcategoryProductsubcategory obj) {
        return false;
    }
    
    public void ProductcategoryProductsubcategoryDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ProductcategoryProductsubcategory.findProductcategoryProductsubcategoryEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProductcategoryProductsubcategory' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProductcategoryProductsubcategory>();
        for (int i = 0; i < 10; i++) {
            ProductcategoryProductsubcategory obj = getNewTransientProductcategoryProductsubcategory(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
