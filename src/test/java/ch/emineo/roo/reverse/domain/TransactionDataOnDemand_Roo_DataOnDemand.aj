// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Transaction;
import ch.emineo.roo.reverse.domain.TransactionDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect TransactionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TransactionDataOnDemand: @Component;
    
    private Random TransactionDataOnDemand.rnd = new SecureRandom();
    
    private List<Transaction> TransactionDataOnDemand.data;
    
    public Transaction TransactionDataOnDemand.getNewTransientTransaction(int index) {
        Transaction obj = new Transaction();
        setAmount(obj, index);
        setDate(obj, index);
        setMessage(obj, index);
        setTransactiontype(obj, index);
        return obj;
    }
    
    public void TransactionDataOnDemand.setAmount(Transaction obj, int index) {
        Double amount = new Integer(index).doubleValue();
        obj.setAmount(amount);
    }
    
    public void TransactionDataOnDemand.setDate(Transaction obj, int index) {
        Date date = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDate(date);
    }
    
    public void TransactionDataOnDemand.setMessage(Transaction obj, int index) {
        String message = "message_" + index;
        if (message.length() > 255) {
            message = message.substring(0, 255);
        }
        obj.setMessage(message);
    }
    
    public void TransactionDataOnDemand.setTransactiontype(Transaction obj, int index) {
        String transactiontype = "transactiontype_" + index;
        if (transactiontype.length() > 255) {
            transactiontype = transactiontype.substring(0, 255);
        }
        obj.setTransactiontype(transactiontype);
    }
    
    public Transaction TransactionDataOnDemand.getSpecificTransaction(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Transaction obj = data.get(index);
        Integer id = obj.getTransactionid();
        return Transaction.findTransaction(id);
    }
    
    public Transaction TransactionDataOnDemand.getRandomTransaction() {
        init();
        Transaction obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getTransactionid();
        return Transaction.findTransaction(id);
    }
    
    public boolean TransactionDataOnDemand.modifyTransaction(Transaction obj) {
        return false;
    }
    
    public void TransactionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Transaction.findTransactionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Transaction' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Transaction>();
        for (int i = 0; i < 10; i++) {
            Transaction obj = getNewTransientTransaction(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
