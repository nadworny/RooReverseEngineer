// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Productthemesubcategory;
import ch.emineo.roo.reverse.domain.ProductthemesubcategoryDataOnDemand;
import ch.emineo.roo.reverse.domain.ProductthemesubcategoryIntegrationTest;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ProductthemesubcategoryIntegrationTest_Roo_IntegrationTest {
    
    declare @type: ProductthemesubcategoryIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: ProductthemesubcategoryIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: ProductthemesubcategoryIntegrationTest: @Transactional;
    
    @Autowired
    private ProductthemesubcategoryDataOnDemand ProductthemesubcategoryIntegrationTest.dod;
    
    @Test
    public void ProductthemesubcategoryIntegrationTest.testCountProductthemesubcategorys() {
        Assert.assertNotNull("Data on demand for 'Productthemesubcategory' failed to initialize correctly", dod.getRandomProductthemesubcategory());
        long count = Productthemesubcategory.countProductthemesubcategorys();
        Assert.assertTrue("Counter for 'Productthemesubcategory' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void ProductthemesubcategoryIntegrationTest.testFindProductthemesubcategory() {
        Productthemesubcategory obj = dod.getRandomProductthemesubcategory();
        Assert.assertNotNull("Data on demand for 'Productthemesubcategory' failed to initialize correctly", obj);
        Integer id = obj.getProductthemesubcategoryid();
        Assert.assertNotNull("Data on demand for 'Productthemesubcategory' failed to provide an identifier", id);
        obj = Productthemesubcategory.findProductthemesubcategory(id);
        Assert.assertNotNull("Find method for 'Productthemesubcategory' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Productthemesubcategory' returned the incorrect identifier", id, obj.getProductthemesubcategoryid());
    }
    
    @Test
    public void ProductthemesubcategoryIntegrationTest.testFindAllProductthemesubcategorys() {
        Assert.assertNotNull("Data on demand for 'Productthemesubcategory' failed to initialize correctly", dod.getRandomProductthemesubcategory());
        long count = Productthemesubcategory.countProductthemesubcategorys();
        Assert.assertTrue("Too expensive to perform a find all test for 'Productthemesubcategory', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Productthemesubcategory> result = Productthemesubcategory.findAllProductthemesubcategorys();
        Assert.assertNotNull("Find all method for 'Productthemesubcategory' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Productthemesubcategory' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void ProductthemesubcategoryIntegrationTest.testFindProductthemesubcategoryEntries() {
        Assert.assertNotNull("Data on demand for 'Productthemesubcategory' failed to initialize correctly", dod.getRandomProductthemesubcategory());
        long count = Productthemesubcategory.countProductthemesubcategorys();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Productthemesubcategory> result = Productthemesubcategory.findProductthemesubcategoryEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Productthemesubcategory' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Productthemesubcategory' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void ProductthemesubcategoryIntegrationTest.testPersist() {
        Assert.assertNotNull("Data on demand for 'Productthemesubcategory' failed to initialize correctly", dod.getRandomProductthemesubcategory());
        Productthemesubcategory obj = dod.getNewTransientProductthemesubcategory(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Productthemesubcategory' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Productthemesubcategory' identifier to be null", obj.getProductthemesubcategoryid());
        obj.persist();
        obj.flush();
        Assert.assertNotNull("Expected 'Productthemesubcategory' identifier to no longer be null", obj.getProductthemesubcategoryid());
    }
    
    @Test
    public void ProductthemesubcategoryIntegrationTest.testRemove() {
        Productthemesubcategory obj = dod.getRandomProductthemesubcategory();
        Assert.assertNotNull("Data on demand for 'Productthemesubcategory' failed to initialize correctly", obj);
        Integer id = obj.getProductthemesubcategoryid();
        Assert.assertNotNull("Data on demand for 'Productthemesubcategory' failed to provide an identifier", id);
        obj = Productthemesubcategory.findProductthemesubcategory(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'Productthemesubcategory' with identifier '" + id + "'", Productthemesubcategory.findProductthemesubcategory(id));
    }
    
}
