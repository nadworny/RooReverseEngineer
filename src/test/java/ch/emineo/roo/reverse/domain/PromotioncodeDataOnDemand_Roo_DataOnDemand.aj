// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Promotion;
import ch.emineo.roo.reverse.domain.PromotionDataOnDemand;
import ch.emineo.roo.reverse.domain.Promotioncode;
import ch.emineo.roo.reverse.domain.PromotioncodeDataOnDemand;
import ch.emineo.roo.reverse.domain.User;
import ch.emineo.roo.reverse.domain.UserDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PromotioncodeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PromotioncodeDataOnDemand: @Component;
    
    private Random PromotioncodeDataOnDemand.rnd = new SecureRandom();
    
    private List<Promotioncode> PromotioncodeDataOnDemand.data;
    
    @Autowired
    private PromotionDataOnDemand PromotioncodeDataOnDemand.promotionDataOnDemand;
    
    @Autowired
    private UserDataOnDemand PromotioncodeDataOnDemand.userDataOnDemand;
    
    public Promotioncode PromotioncodeDataOnDemand.getNewTransientPromotioncode(int index) {
        Promotioncode obj = new Promotioncode();
        setOnline(obj, index);
        setPromotionFk(obj, index);
        setPublic1(obj, index);
        setUserFk(obj, index);
        return obj;
    }
    
    public void PromotioncodeDataOnDemand.setOnline(Promotioncode obj, int index) {
        Boolean online = true;
        obj.setOnline(online);
    }
    
    public void PromotioncodeDataOnDemand.setPromotionFk(Promotioncode obj, int index) {
        Promotion promotionFk = promotionDataOnDemand.getRandomPromotion();
        obj.setPromotionFk(promotionFk);
    }
    
    public void PromotioncodeDataOnDemand.setPublic1(Promotioncode obj, int index) {
        Boolean public1 = true;
        obj.setPublic1(public1);
    }
    
    public void PromotioncodeDataOnDemand.setUserFk(Promotioncode obj, int index) {
        User userFk = userDataOnDemand.getRandomUser();
        obj.setUserFk(userFk);
    }
    
    public Promotioncode PromotioncodeDataOnDemand.getSpecificPromotioncode(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Promotioncode obj = data.get(index);
        String id = obj.getPromotioncodeid();
        return Promotioncode.findPromotioncode(id);
    }
    
    public Promotioncode PromotioncodeDataOnDemand.getRandomPromotioncode() {
        init();
        Promotioncode obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getPromotioncodeid();
        return Promotioncode.findPromotioncode(id);
    }
    
    public boolean PromotioncodeDataOnDemand.modifyPromotioncode(Promotioncode obj) {
        return false;
    }
    
    public void PromotioncodeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Promotioncode.findPromotioncodeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Promotioncode' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Promotioncode>();
        for (int i = 0; i < 10; i++) {
            Promotioncode obj = getNewTransientPromotioncode(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
