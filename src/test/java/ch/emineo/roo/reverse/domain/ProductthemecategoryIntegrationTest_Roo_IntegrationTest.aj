// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Productthemecategory;
import ch.emineo.roo.reverse.domain.ProductthemecategoryDataOnDemand;
import ch.emineo.roo.reverse.domain.ProductthemecategoryIntegrationTest;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ProductthemecategoryIntegrationTest_Roo_IntegrationTest {
    
    declare @type: ProductthemecategoryIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: ProductthemecategoryIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: ProductthemecategoryIntegrationTest: @Transactional;
    
    @Autowired
    private ProductthemecategoryDataOnDemand ProductthemecategoryIntegrationTest.dod;
    
    @Test
    public void ProductthemecategoryIntegrationTest.testCountProductthemecategorys() {
        Assert.assertNotNull("Data on demand for 'Productthemecategory' failed to initialize correctly", dod.getRandomProductthemecategory());
        long count = Productthemecategory.countProductthemecategorys();
        Assert.assertTrue("Counter for 'Productthemecategory' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void ProductthemecategoryIntegrationTest.testFindProductthemecategory() {
        Productthemecategory obj = dod.getRandomProductthemecategory();
        Assert.assertNotNull("Data on demand for 'Productthemecategory' failed to initialize correctly", obj);
        Integer id = obj.getProductthemecategoryid();
        Assert.assertNotNull("Data on demand for 'Productthemecategory' failed to provide an identifier", id);
        obj = Productthemecategory.findProductthemecategory(id);
        Assert.assertNotNull("Find method for 'Productthemecategory' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Productthemecategory' returned the incorrect identifier", id, obj.getProductthemecategoryid());
    }
    
    @Test
    public void ProductthemecategoryIntegrationTest.testFindAllProductthemecategorys() {
        Assert.assertNotNull("Data on demand for 'Productthemecategory' failed to initialize correctly", dod.getRandomProductthemecategory());
        long count = Productthemecategory.countProductthemecategorys();
        Assert.assertTrue("Too expensive to perform a find all test for 'Productthemecategory', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Productthemecategory> result = Productthemecategory.findAllProductthemecategorys();
        Assert.assertNotNull("Find all method for 'Productthemecategory' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Productthemecategory' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void ProductthemecategoryIntegrationTest.testFindProductthemecategoryEntries() {
        Assert.assertNotNull("Data on demand for 'Productthemecategory' failed to initialize correctly", dod.getRandomProductthemecategory());
        long count = Productthemecategory.countProductthemecategorys();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Productthemecategory> result = Productthemecategory.findProductthemecategoryEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Productthemecategory' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Productthemecategory' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void ProductthemecategoryIntegrationTest.testPersist() {
        Assert.assertNotNull("Data on demand for 'Productthemecategory' failed to initialize correctly", dod.getRandomProductthemecategory());
        Productthemecategory obj = dod.getNewTransientProductthemecategory(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Productthemecategory' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Productthemecategory' identifier to be null", obj.getProductthemecategoryid());
        obj.persist();
        obj.flush();
        Assert.assertNotNull("Expected 'Productthemecategory' identifier to no longer be null", obj.getProductthemecategoryid());
    }
    
    @Test
    public void ProductthemecategoryIntegrationTest.testRemove() {
        Productthemecategory obj = dod.getRandomProductthemecategory();
        Assert.assertNotNull("Data on demand for 'Productthemecategory' failed to initialize correctly", obj);
        Integer id = obj.getProductthemecategoryid();
        Assert.assertNotNull("Data on demand for 'Productthemecategory' failed to provide an identifier", id);
        obj = Productthemecategory.findProductthemecategory(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'Productthemecategory' with identifier '" + id + "'", Productthemecategory.findProductthemecategory(id));
    }
    
}
