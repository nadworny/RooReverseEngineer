// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Advancenotice;
import ch.emineo.roo.reverse.domain.AdvancenoticeAttribute;
import ch.emineo.roo.reverse.domain.AdvancenoticeAttributeDataOnDemand;
import ch.emineo.roo.reverse.domain.AdvancenoticeAttributePK;
import ch.emineo.roo.reverse.domain.AdvancenoticeDataOnDemand;
import ch.emineo.roo.reverse.domain.Attribute;
import ch.emineo.roo.reverse.domain.AttributeDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AdvancenoticeAttributeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AdvancenoticeAttributeDataOnDemand: @Component;
    
    private Random AdvancenoticeAttributeDataOnDemand.rnd = new SecureRandom();
    
    private List<AdvancenoticeAttribute> AdvancenoticeAttributeDataOnDemand.data;
    
    @Autowired
    private AdvancenoticeDataOnDemand AdvancenoticeAttributeDataOnDemand.advancenoticeDataOnDemand;
    
    @Autowired
    private AttributeDataOnDemand AdvancenoticeAttributeDataOnDemand.attributeDataOnDemand;
    
    public AdvancenoticeAttribute AdvancenoticeAttributeDataOnDemand.getNewTransientAdvancenoticeAttribute(int index) {
        AdvancenoticeAttribute obj = new AdvancenoticeAttribute();
        setEmbeddedIdClass(obj, index);
        setAdvancenoticeAdvancenoticeid(obj, index);
        setAttributesAttributeid(obj, index);
        return obj;
    }
    
    public void AdvancenoticeAttributeDataOnDemand.setEmbeddedIdClass(AdvancenoticeAttribute obj, int index) {
        Integer advancenoticeAdvancenoticeid = new Integer(index);
        Integer idx = new Integer(index);
        
        AdvancenoticeAttributePK embeddedIdClass = new AdvancenoticeAttributePK(advancenoticeAdvancenoticeid, idx);
        obj.setId(embeddedIdClass);
    }
    
    public void AdvancenoticeAttributeDataOnDemand.setAdvancenoticeAdvancenoticeid(AdvancenoticeAttribute obj, int index) {
        Advancenotice advancenoticeAdvancenoticeid = advancenoticeDataOnDemand.getRandomAdvancenotice();
        obj.setAdvancenoticeAdvancenoticeid(advancenoticeAdvancenoticeid);
    }
    
    public void AdvancenoticeAttributeDataOnDemand.setAttributesAttributeid(AdvancenoticeAttribute obj, int index) {
        Attribute attributesAttributeid = attributeDataOnDemand.getRandomAttribute();
        obj.setAttributesAttributeid(attributesAttributeid);
    }
    
    public AdvancenoticeAttribute AdvancenoticeAttributeDataOnDemand.getSpecificAdvancenoticeAttribute(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        AdvancenoticeAttribute obj = data.get(index);
        AdvancenoticeAttributePK id = obj.getId();
        return AdvancenoticeAttribute.findAdvancenoticeAttribute(id);
    }
    
    public AdvancenoticeAttribute AdvancenoticeAttributeDataOnDemand.getRandomAdvancenoticeAttribute() {
        init();
        AdvancenoticeAttribute obj = data.get(rnd.nextInt(data.size()));
        AdvancenoticeAttributePK id = obj.getId();
        return AdvancenoticeAttribute.findAdvancenoticeAttribute(id);
    }
    
    public boolean AdvancenoticeAttributeDataOnDemand.modifyAdvancenoticeAttribute(AdvancenoticeAttribute obj) {
        return false;
    }
    
    public void AdvancenoticeAttributeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = AdvancenoticeAttribute.findAdvancenoticeAttributeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'AdvancenoticeAttribute' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<AdvancenoticeAttribute>();
        for (int i = 0; i < 10; i++) {
            AdvancenoticeAttribute obj = getNewTransientAdvancenoticeAttribute(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
