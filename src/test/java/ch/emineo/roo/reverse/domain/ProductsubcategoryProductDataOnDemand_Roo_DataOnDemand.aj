// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Product;
import ch.emineo.roo.reverse.domain.ProductDataOnDemand;
import ch.emineo.roo.reverse.domain.Productsubcategory;
import ch.emineo.roo.reverse.domain.ProductsubcategoryDataOnDemand;
import ch.emineo.roo.reverse.domain.ProductsubcategoryProduct;
import ch.emineo.roo.reverse.domain.ProductsubcategoryProductDataOnDemand;
import ch.emineo.roo.reverse.domain.ProductsubcategoryProductPK;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProductsubcategoryProductDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProductsubcategoryProductDataOnDemand: @Component;
    
    private Random ProductsubcategoryProductDataOnDemand.rnd = new SecureRandom();
    
    private List<ProductsubcategoryProduct> ProductsubcategoryProductDataOnDemand.data;
    
    @Autowired
    private ProductDataOnDemand ProductsubcategoryProductDataOnDemand.productDataOnDemand;
    
    @Autowired
    private ProductsubcategoryDataOnDemand ProductsubcategoryProductDataOnDemand.productsubcategoryDataOnDemand;
    
    public ProductsubcategoryProduct ProductsubcategoryProductDataOnDemand.getNewTransientProductsubcategoryProduct(int index) {
        ProductsubcategoryProduct obj = new ProductsubcategoryProduct();
        setEmbeddedIdClass(obj, index);
        setProductsProductid(obj, index);
        setProductsubcategoryProductsubcategoryid(obj, index);
        return obj;
    }
    
    public void ProductsubcategoryProductDataOnDemand.setEmbeddedIdClass(ProductsubcategoryProduct obj, int index) {
        Integer productsubcategoryProductsubcategoryid = new Integer(index);
        Integer idx = new Integer(index);
        
        ProductsubcategoryProductPK embeddedIdClass = new ProductsubcategoryProductPK(productsubcategoryProductsubcategoryid, idx);
        obj.setId(embeddedIdClass);
    }
    
    public void ProductsubcategoryProductDataOnDemand.setProductsProductid(ProductsubcategoryProduct obj, int index) {
        Product productsProductid = productDataOnDemand.getRandomProduct();
        obj.setProductsProductid(productsProductid);
    }
    
    public void ProductsubcategoryProductDataOnDemand.setProductsubcategoryProductsubcategoryid(ProductsubcategoryProduct obj, int index) {
        Productsubcategory productsubcategoryProductsubcategoryid = productsubcategoryDataOnDemand.getRandomProductsubcategory();
        obj.setProductsubcategoryProductsubcategoryid(productsubcategoryProductsubcategoryid);
    }
    
    public ProductsubcategoryProduct ProductsubcategoryProductDataOnDemand.getSpecificProductsubcategoryProduct(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProductsubcategoryProduct obj = data.get(index);
        ProductsubcategoryProductPK id = obj.getId();
        return ProductsubcategoryProduct.findProductsubcategoryProduct(id);
    }
    
    public ProductsubcategoryProduct ProductsubcategoryProductDataOnDemand.getRandomProductsubcategoryProduct() {
        init();
        ProductsubcategoryProduct obj = data.get(rnd.nextInt(data.size()));
        ProductsubcategoryProductPK id = obj.getId();
        return ProductsubcategoryProduct.findProductsubcategoryProduct(id);
    }
    
    public boolean ProductsubcategoryProductDataOnDemand.modifyProductsubcategoryProduct(ProductsubcategoryProduct obj) {
        return false;
    }
    
    public void ProductsubcategoryProductDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ProductsubcategoryProduct.findProductsubcategoryProductEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProductsubcategoryProduct' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProductsubcategoryProduct>();
        for (int i = 0; i < 10; i++) {
            ProductsubcategoryProduct obj = getNewTransientProductsubcategoryProduct(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
