// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Promotion;
import ch.emineo.roo.reverse.domain.PromotionDataOnDemand;
import ch.emineo.roo.reverse.domain.PromotionIntegrationTest;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect PromotionIntegrationTest_Roo_IntegrationTest {
    
    declare @type: PromotionIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: PromotionIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: PromotionIntegrationTest: @Transactional;
    
    @Autowired
    private PromotionDataOnDemand PromotionIntegrationTest.dod;
    
    @Test
    public void PromotionIntegrationTest.testCountPromotions() {
        Assert.assertNotNull("Data on demand for 'Promotion' failed to initialize correctly", dod.getRandomPromotion());
        long count = Promotion.countPromotions();
        Assert.assertTrue("Counter for 'Promotion' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void PromotionIntegrationTest.testFindPromotion() {
        Promotion obj = dod.getRandomPromotion();
        Assert.assertNotNull("Data on demand for 'Promotion' failed to initialize correctly", obj);
        Integer id = obj.getPromotionid();
        Assert.assertNotNull("Data on demand for 'Promotion' failed to provide an identifier", id);
        obj = Promotion.findPromotion(id);
        Assert.assertNotNull("Find method for 'Promotion' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Promotion' returned the incorrect identifier", id, obj.getPromotionid());
    }
    
    @Test
    public void PromotionIntegrationTest.testFindAllPromotions() {
        Assert.assertNotNull("Data on demand for 'Promotion' failed to initialize correctly", dod.getRandomPromotion());
        long count = Promotion.countPromotions();
        Assert.assertTrue("Too expensive to perform a find all test for 'Promotion', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Promotion> result = Promotion.findAllPromotions();
        Assert.assertNotNull("Find all method for 'Promotion' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Promotion' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void PromotionIntegrationTest.testFindPromotionEntries() {
        Assert.assertNotNull("Data on demand for 'Promotion' failed to initialize correctly", dod.getRandomPromotion());
        long count = Promotion.countPromotions();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Promotion> result = Promotion.findPromotionEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Promotion' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Promotion' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void PromotionIntegrationTest.testPersist() {
        Assert.assertNotNull("Data on demand for 'Promotion' failed to initialize correctly", dod.getRandomPromotion());
        Promotion obj = dod.getNewTransientPromotion(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Promotion' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Promotion' identifier to be null", obj.getPromotionid());
        obj.persist();
        obj.flush();
        Assert.assertNotNull("Expected 'Promotion' identifier to no longer be null", obj.getPromotionid());
    }
    
    @Test
    public void PromotionIntegrationTest.testRemove() {
        Promotion obj = dod.getRandomPromotion();
        Assert.assertNotNull("Data on demand for 'Promotion' failed to initialize correctly", obj);
        Integer id = obj.getPromotionid();
        Assert.assertNotNull("Data on demand for 'Promotion' failed to provide an identifier", id);
        obj = Promotion.findPromotion(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'Promotion' with identifier '" + id + "'", Promotion.findPromotion(id));
    }
    
}
