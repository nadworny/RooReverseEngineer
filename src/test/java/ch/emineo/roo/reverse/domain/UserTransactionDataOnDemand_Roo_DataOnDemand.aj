// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Transaction;
import ch.emineo.roo.reverse.domain.TransactionDataOnDemand;
import ch.emineo.roo.reverse.domain.User;
import ch.emineo.roo.reverse.domain.UserDataOnDemand;
import ch.emineo.roo.reverse.domain.UserTransaction;
import ch.emineo.roo.reverse.domain.UserTransactionDataOnDemand;
import ch.emineo.roo.reverse.domain.UserTransactionPK;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UserTransactionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserTransactionDataOnDemand: @Component;
    
    private Random UserTransactionDataOnDemand.rnd = new SecureRandom();
    
    private List<UserTransaction> UserTransactionDataOnDemand.data;
    
    @Autowired
    private TransactionDataOnDemand UserTransactionDataOnDemand.transactionDataOnDemand;
    
    @Autowired
    private UserDataOnDemand UserTransactionDataOnDemand.userDataOnDemand;
    
    public UserTransaction UserTransactionDataOnDemand.getNewTransientUserTransaction(int index) {
        UserTransaction obj = new UserTransaction();
        setEmbeddedIdClass(obj, index);
        setTransactionsTransactionid(obj, index);
        setUserUserid(obj, index);
        return obj;
    }
    
    public void UserTransactionDataOnDemand.setEmbeddedIdClass(UserTransaction obj, int index) {
        Integer userUserid = new Integer(index);
        Integer idx = new Integer(index);
        
        UserTransactionPK embeddedIdClass = new UserTransactionPK(userUserid, idx);
        obj.setId(embeddedIdClass);
    }
    
    public void UserTransactionDataOnDemand.setTransactionsTransactionid(UserTransaction obj, int index) {
        Transaction transactionsTransactionid = transactionDataOnDemand.getRandomTransaction();
        obj.setTransactionsTransactionid(transactionsTransactionid);
    }
    
    public void UserTransactionDataOnDemand.setUserUserid(UserTransaction obj, int index) {
        User userUserid = userDataOnDemand.getRandomUser();
        obj.setUserUserid(userUserid);
    }
    
    public UserTransaction UserTransactionDataOnDemand.getSpecificUserTransaction(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserTransaction obj = data.get(index);
        UserTransactionPK id = obj.getId();
        return UserTransaction.findUserTransaction(id);
    }
    
    public UserTransaction UserTransactionDataOnDemand.getRandomUserTransaction() {
        init();
        UserTransaction obj = data.get(rnd.nextInt(data.size()));
        UserTransactionPK id = obj.getId();
        return UserTransaction.findUserTransaction(id);
    }
    
    public boolean UserTransactionDataOnDemand.modifyUserTransaction(UserTransaction obj) {
        return false;
    }
    
    public void UserTransactionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UserTransaction.findUserTransactionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserTransaction' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserTransaction>();
        for (int i = 0; i < 10; i++) {
            UserTransaction obj = getNewTransientUserTransaction(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
