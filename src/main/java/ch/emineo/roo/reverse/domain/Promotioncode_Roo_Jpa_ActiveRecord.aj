// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.emineo.roo.reverse.domain;

import ch.emineo.roo.reverse.domain.Promotioncode;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Promotioncode_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Promotioncode.entityManager;
    
    public static final EntityManager Promotioncode.entityManager() {
        EntityManager em = new Promotioncode().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Promotioncode.countPromotioncodes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Promotioncode o", Long.class).getSingleResult();
    }
    
    public static List<Promotioncode> Promotioncode.findAllPromotioncodes() {
        return entityManager().createQuery("SELECT o FROM Promotioncode o", Promotioncode.class).getResultList();
    }
    
    public static Promotioncode Promotioncode.findPromotioncode(String promotioncodeid) {
        if (promotioncodeid == null || promotioncodeid.length() == 0) return null;
        return entityManager().find(Promotioncode.class, promotioncodeid);
    }
    
    public static List<Promotioncode> Promotioncode.findPromotioncodeEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Promotioncode o", Promotioncode.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Promotioncode.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Promotioncode.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Promotioncode attached = Promotioncode.findPromotioncode(this.promotioncodeid);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Promotioncode.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Promotioncode.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Promotioncode Promotioncode.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Promotioncode merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
